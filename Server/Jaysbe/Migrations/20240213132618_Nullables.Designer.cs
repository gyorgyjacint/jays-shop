// <auto-generated />
using System;
using Jaysbe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jaysbe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240213132618_Nullables")]
    partial class Nullables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jaysbe.Models.Category", b =>
                {
                    b.Property<Guid?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PicturesUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<long?>("ProductNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Jaysbe.Models.ProductDescOption", b =>
                {
                    b.Property<Guid?>("ProductDescOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDescOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDescOption");
                });

            modelBuilder.Entity("Jaysbe.Models.SubCategory", b =>
                {
                    b.Property<Guid?>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa",
                            Name = "TestUser",
                            NormalizedName = "TESTUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "463bdd5c-ca52-44ff-8060-f8914b55bb54",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e19e0a1-ae4d-478d-9c75-a13bd18c164e",
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08e35301-21b3-4116-a14a-e45574d5d2d2",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "0a137398-bcc4-4c66-b425-76347c03f64b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e0ddc1d-74d6-4b87-8f8f-ba7a7e33bd42",
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@USER.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "190e7178-4166-494e-b7e3-1ba1082fdb57",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "e18d2c84-057a-4b08-8a1f-98eb1c61d8fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98c090b9-9e04-4c7a-84fa-1ea931453319",
                            Email = "user3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@USER.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d97d950-c2d0-4670-9f8d-0c39e13d61b8",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "b1586079-78c0-46de-9a7a-b8a96feda5b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "276e1565-a79a-419a-b807-2b21362d6255",
                            Email = "user4@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@USER.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df9f5ff5-1dd0-40e1-a932-2a2a79128087",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "fe1ea75e-f9f8-48ce-b6c9-99800ee6077d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00f8a617-91ad-4460-9e48-cffe6b0142c2",
                            Email = "user5@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@USER.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c8fc676-4ddb-4f8c-b04d-dc7bd39a5869",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "118ae8c4-0854-437b-ad9c-ccd218d1c287",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2ce68d3-0aea-4ac6-bbc0-cbdbc25a4bfa",
                            Email = "user6@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@USER.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2eafb68-3016-4c76-9e44-00c08bdad020",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "edf0b68c-b259-460d-8580-cbaa1b559cb4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f3d7282-090e-4c16-b500-1eea2b28b3a4",
                            Email = "user7@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@USER.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dc9f5a5-c483-42f2-be25-a9777c25e618",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "86cfb1ff-d836-4b09-ab82-f0d1e9ff0b6e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ce05687-2479-4d31-ac2a-a17f51c31e6f",
                            Email = "user8@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@USER.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ad17675-acb3-403d-ae58-abb56ba4a7a4",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "51de2c9e-54d1-4b51-b727-7b31e58ad2c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcf55bed-ee91-4ccb-a761-f0ee4e7abb86",
                            Email = "user9@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@USER.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "047caf99-e7b4-4fba-aa4d-9bfd72da350b",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "bac23f98-2305-408b-bb06-2990203cc051",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4846f69f-b34f-4ebd-9bb5-7091da3102ab",
                            Email = "user10@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@USER.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAELvuhlJ2VzRaNTlGIyLOKFwe8Jjz0vi2XZqJc35Edx4SJh2IkjwnWUjc0aytI5diqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cef4f155-e831-4dd1-bcd6-a378bc7b7f17",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "463bdd5c-ca52-44ff-8060-f8914b55bb54",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "0a137398-bcc4-4c66-b425-76347c03f64b",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "e18d2c84-057a-4b08-8a1f-98eb1c61d8fa",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "b1586079-78c0-46de-9a7a-b8a96feda5b2",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "fe1ea75e-f9f8-48ce-b6c9-99800ee6077d",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "118ae8c4-0854-437b-ad9c-ccd218d1c287",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "edf0b68c-b259-460d-8580-cbaa1b559cb4",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "86cfb1ff-d836-4b09-ab82-f0d1e9ff0b6e",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "51de2c9e-54d1-4b51-b727-7b31e58ad2c8",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        },
                        new
                        {
                            UserId = "bac23f98-2305-408b-bb06-2990203cc051",
                            RoleId = "5aa88b9c-a8de-482d-a802-d1d2bf4075fa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.HasOne("Jaysbe.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Jaysbe.Models.ProductDescOption", b =>
                {
                    b.HasOne("Jaysbe.Models.Product", null)
                        .WithMany("ProductDescriptions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Jaysbe.Models.SubCategory", b =>
                {
                    b.HasOne("Jaysbe.Models.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jaysbe.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.Navigation("ProductDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
