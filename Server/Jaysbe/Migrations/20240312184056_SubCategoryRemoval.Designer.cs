// <auto-generated />
using System;
using Jaysbe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jaysbe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240312184056_SubCategoryRemoval")]
    partial class SubCategoryRemoval
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jaysbe.Models.Category", b =>
                {
                    b.Property<Guid?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PicturesUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<long?>("ProductNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Jaysbe.Models.ProductDescOption", b =>
                {
                    b.Property<Guid?>("ProductDescOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDescOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDescOption");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cdb6db18-f783-4cb8-ba75-d8630d953017",
                            Name = "TestUser",
                            NormalizedName = "TESTUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b949ff85-34d3-4ddf-bbc5-840697d8fae1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06a87eec-a1c1-43e1-89b7-8dfb7ec62882",
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01bee919-7279-4862-9dfa-21a494dd597e",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "4da5197b-55b0-4379-b780-a966444a6121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81aaf484-e821-421f-b06f-88d34b386210",
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@USER.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ea3e500-81a0-428e-81f6-12a380f3e5d8",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "c69fb24b-8579-4afa-926f-1f00304113bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06bd3031-1ecd-440d-96d5-3fcb52533324",
                            Email = "user3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@USER.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f36b6aaf-1612-4a38-8adf-2ede63e588b2",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "e1a50299-8c68-4d0d-a4d8-2c4aa852f49f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40cc7dfd-80ab-4a33-bde7-45878e744592",
                            Email = "user4@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@USER.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2241f50f-dced-4b39-bc1d-11c8e2a65f52",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "26b76950-4c74-494b-b214-8278278cbfae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dac4857-1e9d-46a8-a459-70141d6edf64",
                            Email = "user5@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@USER.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ee4b0d5-be73-4993-8b26-77b23bb5542f",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "e1061245-a3cb-4d2b-940d-b47475970ae7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb0980d-3819-4b81-9f1e-e5054cf2e05c",
                            Email = "user6@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@USER.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a50252f-adce-451a-89e0-5c8ff5635cb2",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "83283e6b-b6ce-428a-9d96-5ecf7078e13c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f970a6b2-6df0-48bc-9fa7-d6246b5e4b93",
                            Email = "user7@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@USER.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3abe6d49-f2c7-4b7b-ba08-73129fa3bcc2",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "2ded97b0-48ef-4949-b7fc-348c7c8729ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0934dc1c-02de-47bf-9612-1bd40cee7ff8",
                            Email = "user8@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@USER.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cacc2830-bb8c-4f9f-98be-5eec2ffcdeea",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "2a73266d-8d96-4cdd-aede-30e4dc6fb397",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "868785cb-346a-4d99-9999-40c0694b4032",
                            Email = "user9@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@USER.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a4e4f8a-6ea3-44bc-8be3-bc4bf824e909",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "a926fc06-787d-4974-b776-fe949682193a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d14ef90-63b5-401f-a07d-1ecee1096d98",
                            Email = "user10@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@USER.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtCuJBun9qwldvof8Nvfpuz9IvangKyOu+T6R0xISfcV+ho708Rx+d1P6c/3xHAfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e835f563-4fc6-45d0-ab26-9df08f34d633",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b949ff85-34d3-4ddf-bbc5-840697d8fae1",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "4da5197b-55b0-4379-b780-a966444a6121",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "c69fb24b-8579-4afa-926f-1f00304113bf",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "e1a50299-8c68-4d0d-a4d8-2c4aa852f49f",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "26b76950-4c74-494b-b214-8278278cbfae",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "e1061245-a3cb-4d2b-940d-b47475970ae7",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "83283e6b-b6ce-428a-9d96-5ecf7078e13c",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "2ded97b0-48ef-4949-b7fc-348c7c8729ff",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "2a73266d-8d96-4cdd-aede-30e4dc6fb397",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        },
                        new
                        {
                            UserId = "a926fc06-787d-4974-b776-fe949682193a",
                            RoleId = "cdb6db18-f783-4cb8-ba75-d8630d953017"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Jaysbe.Models.Category", b =>
                {
                    b.HasOne("Jaysbe.Models.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.HasOne("Jaysbe.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Jaysbe.Models.ProductDescOption", b =>
                {
                    b.HasOne("Jaysbe.Models.Product", null)
                        .WithMany("ProductDescriptions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.Navigation("ProductDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
