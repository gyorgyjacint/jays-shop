// <auto-generated />
using System;
using Jaysbe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jaysbe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240327133338_CategoryRemoveToAddLabel")]
    partial class CategoryRemoveToAddLabel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jaysbe.Models.Label", b =>
                {
                    b.Property<Guid>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LabelId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.Property<Guid?>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Color")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PicturesUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<long?>("ProductNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Jaysbe.Models.ProductDescOption", b =>
                {
                    b.Property<Guid?>("ProductDescOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDescOptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDescOption");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b65f3bb3-498f-4d85-9936-6729f233d0e2",
                            Name = "TestUser",
                            NormalizedName = "TESTUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5f593909-83f7-491a-9e36-f7793eb7c764",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b91b9343-654f-4c3c-8d59-e124397711a7",
                            Email = "user1@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@USER.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "375c4315-37ed-4011-845e-26eb8fbe03ea",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "fb81ce1b-e5fa-4011-b938-de21e7770f56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e51915de-cc8a-4a5e-93ea-afacb4b8a0e2",
                            Email = "user2@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@USER.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "056a9c04-aa3a-4b72-8913-6a9473464992",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "f6153610-7328-457b-bc1f-f885a8b85be7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21d2c6c4-c6bd-4b8c-a7d0-5702053ef1da",
                            Email = "user3@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@USER.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "038799fc-1135-4669-ad9e-309687991928",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "bf4d56fe-a070-4b2b-bb60-062dd648cf14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da07f549-47a2-4727-bace-273ca30ce5ed",
                            Email = "user4@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@USER.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cf1003f-7836-4d9a-9212-956771b310c4",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = "d934e2bf-0ade-43ca-8341-002d0c439525",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a5d7bbb-a1ca-4201-87e2-e080f2d499a5",
                            Email = "user5@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@USER.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76f708e2-3bb0-4a83-afc8-1db9eba77bad",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = "d0f4ab00-8fb4-4a96-91ce-1fbd5bef623e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c71eb8a4-3dc1-4a01-b090-9320a7330e2c",
                            Email = "user6@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@USER.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3dced03-b950-47ac-a33b-3b3517e09f88",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = "891f799b-d021-485e-b4d5-b9c9a6d488eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff58e0f2-4030-4426-b78e-c6346a4fe93b",
                            Email = "user7@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@USER.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3153f6bf-bb35-44f5-8c11-d646bcb70523",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = "57d28415-4a6b-4f2e-b280-a949dcdc5e74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff671e3e-c41d-4f80-a150-339f3e05d117",
                            Email = "user8@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER8@USER.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "353fe948-baef-4181-b38d-088860bb05ba",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = "13ecfd33-66a5-43a2-ab49-f7d00494c57e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fbb6fe9-6374-457b-948e-a36770a6f0a8",
                            Email = "user9@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER9@USER.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce5272bc-1fda-4afa-92c8-41448a4e3e37",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = "32b569bd-eb28-4370-9058-0d5678cdce8b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc21e3e1-2fac-4ed5-a5e4-66e2dce7e283",
                            Email = "user10@user.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER10@USER.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEICxXlfgCyk9wzE9FWLUekVJi3y9yud1z9Fsj2REyVKTsquXwsJhPijS7DUNJ5WnCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5270c278-3585-4095-9643-e46c8d0c3824",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5f593909-83f7-491a-9e36-f7793eb7c764",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "fb81ce1b-e5fa-4011-b938-de21e7770f56",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "f6153610-7328-457b-bc1f-f885a8b85be7",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "bf4d56fe-a070-4b2b-bb60-062dd648cf14",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "d934e2bf-0ade-43ca-8341-002d0c439525",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "d0f4ab00-8fb4-4a96-91ce-1fbd5bef623e",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "891f799b-d021-485e-b4d5-b9c9a6d488eb",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "57d28415-4a6b-4f2e-b280-a949dcdc5e74",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "13ecfd33-66a5-43a2-ab49-f7d00494c57e",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        },
                        new
                        {
                            UserId = "32b569bd-eb28-4370-9058-0d5678cdce8b",
                            RoleId = "b65f3bb3-498f-4d85-9936-6729f233d0e2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Jaysbe.Models.Label", b =>
                {
                    b.HasOne("Jaysbe.Models.Product", null)
                        .WithMany("Labels")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Jaysbe.Models.ProductDescOption", b =>
                {
                    b.HasOne("Jaysbe.Models.Product", null)
                        .WithMany("ProductDescriptions")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jaysbe.Models.Product", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("ProductDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
